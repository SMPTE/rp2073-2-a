/*! @file common/include/filelist.h
 
    Definition of the filelist data tructure for keeping track of lists of files.
 
    The next file ro ptocess can be obtained using a generator that enumerates the files
    in order.
 
	(c) 2013 Society of Motion Picture & Television Engineers LLC and Woodman Labs, Inc.
	All rights reserved--use subject to compliance with end user license agreement.
 */

#ifndef _FILELIST_H
#define _FILELIST_H


//! Maximum number of pathnames in the filelist (pathname template counts as one list element)
#define MAX_FILELIST_PATHNAME_COUNT  16


/*! @brief Data structure for enumerating files from a list
 
    The files can be represented explicitly as a list or implicitly using a format string
    as a template for enumerating the files.
 
    The list of files can include at most one pathname template string.
 
    If present, the pathname template string must be the last pathanme in the pathname list.
 */
typedef struct _filelist
{
    ALLOCATOR *allocator;       //!< Memory allocator used for pathname strings
    
    int pathname_index;         //!< Index of the next pathname in the enumeration
    int pathname_count;         //!< Number of pathnames in the pathname list
    bool template_flag;         //!< True if the pathname list contains a pathname template
    int template_index;         //!< Sequence number for the next instance of a pathname template

    //! List of pathnames and pathname templates
    char *pathname_list[MAX_FILELIST_PATHNAME_COUNT];
    
    //! Last pathname generated by @ref GetNextFileListPathname is saved for use by the caller
    char last_pathname[PATH_MAX];
    
} FILELIST;


#ifdef __cplusplus
extern "C" {
#endif

    CODEC_ERROR InitFileList(FILELIST *filelist, ALLOCATOR *allocator);

    CODEC_ERROR AddFileListPathname(FILELIST *filelist, const char *pathname);

    CODEC_ERROR AddFileListTemplate(FILELIST *filelist, const char *string);
        
    bool IsPathnameTemplate(const char *pathname);

    CODEC_ERROR GetNextFileListPathname(FILELIST *filelist, char *pathname, size_t size);

    bool FileListHasSinglePathname(const FILELIST *filelist);

    const char *SingleFileListPathname(const FILELIST *filelist);

#ifdef __cplusplus
}
#endif

#endif
